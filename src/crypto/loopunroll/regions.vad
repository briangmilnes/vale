/*

    This file includes regions.proven.vad 

*/

include "../../arch/x64/decls.vad"
include "../../arch/x64/decls64.vad"
include{:verbatim} "../../arch/x64/def.s.dfy"
include{:verbatim} "../../arch/x64/vale.i.dfy"

include "regions.proven.vad"
include{:verbatim} "regions.dfy"

#verbatim
module regions {

import opened x64_def_s
import opened x64_vale_i
import opened dafny_wrappers_i
import opened x64_decls_i
import opened x64_decls64_i


/*
procedure CutTail(inline n : uint8)
    let bytes  := (old(ebp) - old(esi));
    let items  := (old(ebp) - old(esi)) / (n * 8);
    let tail   := (old(ebp) - old(esi)) % (n * 8);
    let itemswotail :=  items - tail;

    reads ebp; esi;

    modifies efl; edx; eax;

    requires
      0 < n <= 4;
      ebp >= esi;
      items < 0x1_0000;

    ensures
       edx == esi + items;
{
  Mov64(eax,ebp);         // eax := end of input
  Sub64(eax,esi);         // bytes
  assert eax == bytes;
  Div64(eax, n);          
  assert eax == items * 8;
  Add64(eax,esi);         
  assert esi == eax + items * 8;
  Mov64(edx, eax);        //edx == esi + items
} 
*/


/*
// Input is esi, modified.
// Data end is in ebp passed up in edx.
// Output is edi, modified.
// Tmp is eax;

procedure CopyLoopOverUnrolledNTail
          (inline taint:taint, ghost src_id:heaplet_id, ghost dst_id:heaplet_id, inline n : uint8)
    let items  := (old(ebp) - old(esi)) / (n * 4);
    let tail   := (old(ebp) - old(esi)) % (n * 4);
    let itemswotail :=  items - tail;

    reads
        ebp;

    modifies
        efl; mem; esi; edi; eax; edx; ebp; ecx; ebp; ebx;

    requires
        ebp >= esi; 

    requires/ensures
        src_id != dst_id;
        ValidSrcReg64(mem, src_id, old(esi), items, taint);
        ValidDstReg64(mem, dst_id, old(edi), items);

    ensures
        OnlyHeapletChanged(old(mem), mem, dst_id);
        OnlyWritesReg64(old(mem), mem, dst_id, old(ebp), items);
        WritesReg64(mem, dst_id, old(edi), items, items, taint,
         Copy64Seq(old(mem), src_id, old(esi), items, items));
{
  CutTail(n);
  CopyLoopOverUnrolledN(taint, src_id, dst_id, n);
  assert OnlyHeapletChanged(old(mem), mem, dst_id);
  assert OnlyWritesReg64(old(mem), mem, dst_id, old(ebp), itemswotail);
  assert WritesReg64(mem, dst_id, old(edi), itemswotail, itemswotail, taint,
          Copy64Seq(old(mem), src_id, old(esi), itemswotail, itemswotail));
  Mov64(edx, ebp);
  CopyLoopOverUnrolledN(taint, src_id, dst_id, 1);
} 
*/

#verbatim
}
#endverbatim
