include "../../lib/util/types.s.dfy"
include "../../lib/util/operations.s.dfy"
include "../../lib/util/words_and_bytes.s.dfy"
include "../../lib/collections/Seqs.s.dfy"
include "../../arch/x64/def.s.dfy"
include "../../arch/x64/vale.i.dfy"
include "../../lib/util/dafny_wrappers.i.dfy"
include "addrlogic.s.dfy"

module proof {

import opened x64_def_s
import opened types_s
import opened x64_vale_i
import opened dafny_wrappers_i
import opened addrlogic

function Plus8'(old_mem : Heaplets, id: heaplet_id, ar : Addrs64, i : nat) : uint64
 requires 0 <= count <= ar.count;
 requires ValidDstAlAddrs64(old_mem, id, ar);
{
  lemma_ValidDstAlAddrs64(old_mem, id, ar);
  BitwiseAdd64(old_mem[id].mem64[EvalAddrOff64(addroff64(ar.addr, i))].v, 8);
}

}
