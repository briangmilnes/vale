/*
  Do some testing on building and proving unrolled loops.

*/

include "../../arch/x64/decls.vad"
include "../../arch/x64/decls64.vad"
include{:verbatim} "../../arch/x64/print.s.dfy"
include{:verbatim} "../../lib/util/dafny_wrappers.i.dfy"
include{:verbatim} "addrlogic.s.dfy" 
include{:verbatim} "seq.proven.dfy"
include{:verbatim} "seq.dfy"

#verbatim
module seqvadproven1 {

import opened x64_def_s
import opened x64_vale_i
import opened x64_print_s
import opened dafny_wrappers_i
import opened x64_decls_i
import opened x64_decls64_i
import opened addrlogic
import opened seqmodule
#endverbatim

procedure {:refined} {:bridge} AddN(inout operand r : uint64, inline n : uint64)
    modifies efl;
    requires r + n < 0x1_0000_0000_0000_0000;
    ensures  r == BitwiseAdd64(old(r), n);
{
   lemma_BitwiseAdd64();
   Add64Wrap(r, n);
} 

#verbatim
predicate IsOReg (r : operand) {r.OReg?}
#endverbatim

procedure {:bridge} {:timeLimitMultiplier 3} Add8(operand ioreg : uint64,
                                             inout operand addtmpreg  : uint64,
                                             ghost id : heaplet_id,
                                             inline off : uint64)

    modifies mem; efl;

    requires IsOReg(@ioreg);
    requires @ioreg != @addtmpreg;
    requires/ensures ValidSrcAlAddr64(mem, id, addroff64(ioreg, off), Public);
    ensures WritesAddr64(old(mem), mem, id, addroff64(old(ioreg), off), Public,
               BitwiseAdd64(old(mem)[id].mem64[EvalAddrOff64(addroff64(old(ioreg),off))].v, 8));
    ensures OnlyWritesAddr64(old(mem), mem, id, addroff64(old(ioreg), off));
{
    lemma_BitwiseAdd64();
    lemma_ValidSrcAlAddr64(mem, id, addroff64(ioreg,off), Public);
    Load64(addtmpreg, ioreg, off * 8, Public, id);
    incr64(addtmpreg);// Hard 8, http://www.imdb.com/title/tt0119256/. 
    incr64(addtmpreg);
    incr64(addtmpreg);
    incr64(addtmpreg);
    incr64(addtmpreg);
    incr64(addtmpreg);
    incr64(addtmpreg);
    incr64(addtmpreg);
    Store64(ioreg, addtmpreg, off * 8, Public, id);
}     

#verbatim
} 
#endverbatim
